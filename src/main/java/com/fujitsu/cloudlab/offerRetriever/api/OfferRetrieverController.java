package com.fujitsu.cloudlab.offerRetriever.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fujitsu.cloudlab.commons.exception.ApiException;
import com.fujitsu.cloudlab.commons.exception.ErrorResponses;
import com.fujitsu.cloudlab.offer.json.model.Offer;
import com.fujitsu.cloudlab.offer.json.model.OffersList;
import com.fujitsu.cloudlab.offerRetriever.service.OfferRetrieverService;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/offers")
public class OfferRetrieverController {
	
	@Autowired
	OfferRetrieverService offerService;
	
	@GetMapping(path = "/{offerId}", consumes = "application/json", produces="application/json")
	@ApiOperation(value = "searches offer by offer id", nickname = "getOffer", notes = "By passing the right Offer ID, you can search the Offer from the persistent database.", response = Offer.class, tags={ "offer reader", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Offer retrieved successfully", response = Offer.class),
        @ApiResponse(code = 400, message = "Invalid Request. Mandatory data missing or invalid date format or any invalid input.", response = ErrorResponses.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponses.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponses.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponses.class),
        @ApiResponse(code = 415, message = "Unsupported MIME Type", response = ErrorResponses.class),
        @ApiResponse(code = 429, message = "Too many requests", response = ErrorResponses.class),
        @ApiResponse(code = 500, message = "Internal Server Error. System down or any runtime error.", response = ErrorResponses.class),
        @ApiResponse(code = 502, message = "Bad Gateway. Retuned when the gateway receives aninvalid response from the upstream server.", response = ErrorResponses.class),
        @ApiResponse(code = 503, message = "Service Unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server", response = ErrorResponses.class),
        @ApiResponse(code = 504, message = "Gateway Timeout error.", response = ErrorResponses.class) })
	public OffersList getOffer(@ApiParam(value = "unique id of the offer",required=true) @PathVariable("offerId") String offerId,
								  @ApiParam(value = "A unique id for each request generated by each application" ,required=true) 
								  @RequestHeader(value="transactionId", required=true) String transactionId) throws ApiException {
		return offerService.getOfferDetails(offerId);
	}

}
